"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = require("react");
var _usePredictiveCompletion = _interopRequireDefault(require("../hooks/usePredictiveCompletion"));
require("./PredictiveTextComponent.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var PredictiveTextInput = function PredictiveTextInput(_ref) {
  var apiKey = _ref.apiKey;
  var _useState = (0, _react.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    inputText = _useState2[0],
    setInputText = _useState2[1];
  var _useState3 = (0, _react.useState)(-1),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedSuggestionIndex = _useState4[0],
    setSelectedSuggestionIndex = _useState4[1];
  var _usePredictiveText = (0, _usePredictiveCompletion["default"])(apiKey),
    fetchSuggestions = _usePredictiveText.fetchSuggestions,
    suggestions = _usePredictiveText.suggestions,
    isLoading = _usePredictiveText.isLoading,
    error = _usePredictiveText.error;
  var handleChange = function handleChange(event) {
    setInputText(event.target.value);
    fetchSuggestions(event.target.value);
    setSelectedSuggestionIndex(-1);
  };
  var appendSuggestion = function appendSuggestion(suggestion) {
    var words = inputText.split(' ');
    words.pop();
    words.push(suggestion);
    setInputText(words.join(' ') + ' ');
  };
  var handleSuggestionClick = function handleSuggestionClick(suggestion) {
    appendSuggestion(suggestion);
  };
  var handleKeyDown = function handleKeyDown(event) {
    if (event.key === 'ArrowDown' && selectedSuggestionIndex < suggestions.length - 1) {
      setSelectedSuggestionIndex(selectedSuggestionIndex + 1);
    } else if (event.key === 'ArrowUp' && selectedSuggestionIndex > 0) {
      setSelectedSuggestionIndex(selectedSuggestionIndex - 1);
    } else if (event.key === 'Enter' && selectedSuggestionIndex >= 0) {
      appendSuggestion(suggestions[selectedSuggestionIndex]);
    }
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("input", {
    type: "text",
    value: inputText,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    placeholder: "Type something...",
    "aria-label": "Predictive text input",
    "aria-autocomplete": "list"
  }), isLoading && /*#__PURE__*/React.createElement("p", null, "Loading suggestions..."), error && /*#__PURE__*/React.createElement("p", null, "Error: ", error.message), inputText && suggestions && /*#__PURE__*/React.createElement("ul", {
    className: "suggestions-list"
  }, suggestions.map(function (suggestion, index) {
    return /*#__PURE__*/React.createElement("li", {
      key: index,
      className: index === selectedSuggestionIndex ? 'selected' : '',
      onClick: function onClick() {
        return handleSuggestionClick(suggestion);
      },
      role: "option",
      "aria-selected": index === selectedSuggestionIndex
    }, suggestion);
  })));
};
var _default = exports["default"] = PredictiveTextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,